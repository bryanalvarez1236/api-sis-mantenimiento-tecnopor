// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Machine {
  code                   String                   @id
  name                   String
  maker                  String?
  location               String
  area                   Area                     @relation(fields: [areaId], references: [id])
  areaId                 Int
  model                  String?
  specificData           String?
  function               String?
  technicalDocumentation TechnicalDocumentation[] @relation("MachineTechnicalDocumentation")
  criticality            Criticality              @relation(fields: [criticalityId], references: [id])
  criticalityId          Int
  image                  MachineImage?
  engines                Engine[]
  activities             Activity[]
  workOrder              WorkOrder[]
  checkList              CheckList[]
  maintenanceRequests    MaintenanceRequest[]
  failureReports         FailureReport[]
  stores                 Store[]
  // createdAt              DateTime                 @default(now())
  // updatedAt              DateTime                 @default(now()) @updatedAt
}

model CheckList {
  id          Int      @id @default(autoincrement())
  machine     Machine  @relation(fields: [machineCode], references: [code])
  machineCode String
  field       String
  type        String
  options     String[]
  placeholder String?
}

model MachineImage {
  id          String  @id @default(uuid())
  publicId    String
  url         String
  machine     Machine @relation(fields: [machineCode], references: [code])
  machineCode String  @unique
}

model Engine {
  code        String      @id
  machine     Machine     @relation(fields: [machineCode], references: [code])
  machineCode String
  function    String
  mark        String?
  type        String?
  powerHp     Float
  powerKw     Float
  voltage     String
  current     String
  rpm         Int
  cosPhi      Float
  performance Float
  frequency   Int
  poles       Int
  ip          Int
  boot        Boot
  workOrders  WorkOrder[]
}

model Activity {
  code         String       @id @default(uuid())
  machine      Machine      @relation(fields: [machineCode], references: [code])
  machineCode  String
  name         String
  frequency    Int?
  activityType ActivityType
  pem          String?
  state        State        @default(ACTIVE)
  workOrders   WorkOrder[]
}

model WorkOrder {
  code                  Int                             @id @default(autoincrement())
  machine               Machine                         @relation(fields: [machineCode], references: [code])
  machineCode           String
  engine                Engine?                         @relation(fields: [engineCode], references: [code])
  engineCode            String?
  activity              Activity?                       @relation(fields: [activityCode], references: [code])
  activityCode          String?
  activityType          WorkOrderActivityType
  priority              WorkOrderPriority
  engineFunction        String?
  activityName          String?
  // from validated to doing
  securityMeasureStarts WorkOrderSecurityMeasureStart[]
  protectionEquipments  WorkOrderProtectionEquipment[]
  // from doing to done
  activityDescription   String?
  stores                StoreWorkOrder[]
  // show only if it's corrective
  failureCause          String?
  startDate             DateTime?
  endDate               DateTime?
  totalHours            Int?
  securityMeasureEnds   WorkOrderSecurityMeasureEnd[]
  observations          String?
  state                 WorkOrderState                  @default(PLANNED)
  // schedule
  daySchedule           DateTime?
  onSchedule            Boolean?
  checkListVerified     CheckListVerified[]
  draftWorkOrder        DraftWorkOrder?
  createdAt             DateTime                        @default(now())
  updatedAt             DateTime                        @default(now()) @updatedAt
}

model DraftWorkOrder {
  code          Int       @id @default(autoincrement())
  workOrder     WorkOrder @relation(fields: [workOrderCode], references: [code])
  workOrderCode Int       @unique
  plannedDay    DateTime
}

model CheckListVerified {
  id            Int       @id @default(autoincrement())
  workOrder     WorkOrder @relation(fields: [workOrderCode], references: [code])
  workOrderCode Int
  field         String
  options       String[]
  value         String?
}

model MaintenanceRequest {
  id          Int      @id @default(autoincrement())
  machine     Machine  @relation(fields: [machineCode], references: [code])
  machineCode String
  description String
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model FailureReport {
  id                Int                 @id @default(autoincrement())
  machine           Machine             @relation(fields: [machineCode], references: [code])
  machineCode       String
  systemFailedState SystemFailedState
  description       String
  operatorName      String
  stopHours         Int
  image             FailureReportImage?
  verified          Boolean             @default(false)
  createdAt         DateTime            @default(now())
}

model FailureReportImage {
  id              Int           @id @default(autoincrement())
  failureReport   FailureReport @relation(fields: [failureReportId], references: [id])
  failureReportId Int           @unique
  publicId        String
  url             String
}

model Store {
  id            Int              @id @default(autoincrement())
  machine       Machine          @relation(fields: [machineCode], references: [code])
  machineCode   String
  name          String
  unit          Unit             @relation(fields: [unitId], references: [id])
  unitId        Int
  amount        Int
  minimumAmount Int
  deleted       Boolean          @default(false)
  workOrders    StoreWorkOrder[]
}

model Unit {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  stores Store[]
}

model StoreWorkOrder {
  id            Int       @id @default(autoincrement())
  workOrder     WorkOrder @relation(fields: [workOrderCode], references: [code])
  workOrderCode Int
  store         Store     @relation(fields: [storeId], references: [id])
  storeId       Int
  amount        Int
}

// Manually created data
model Area {
  id       Int       @id
  name     String    @unique
  hours    Int
  days     Int
  machines Machine[]
}

model Criticality {
  id      Int       @id
  name    String    @unique
  Machine Machine[]
}

model TechnicalDocumentation {
  id      Int       @id
  name    String    @unique
  Machine Machine[] @relation("MachineTechnicalDocumentation")
}

enum State {
  ACTIVE
  INNACTIVE
  DELETED
}

enum Boot {
  DIRECT
  SOFT
}

enum ActivityType {
  CONDITION_CHECK
  VISUAL_INSPECTIONS
  LUBRICATION
  AUTONOMOUS_MAINTENANCE
  PERIODIC_MAINTENANCE
  CORRECTIVE_MAINTENANCE
}

enum WorkOrderState {
  PLANNED
  VALIDATED
  DOING
  DONE
}

enum WorkOrderActivityType {
  PLANNED_PREVENTIVE
  CORRECTIVE
  INSPECTION
  CONDITION_CHECK
  ROUTINE
}

enum WorkOrderPriority {
  URGENT
  IMPORTANT
  NORMAL
}

enum WorkOrderSecurityMeasureStart {
  BLOCKED
  LABELED
  BLOCKED_LABELED
}

enum WorkOrderSecurityMeasureEnd {
  RETIRE
  REPORT
  KEEP
  CHECK
}

enum WorkOrderProtectionEquipment {
  HELMET
  SECURITY_GLASSES
  GLOVES
  SECURITY_HARNESS
  ACOUSTIC_PROTECTORS
  SECURITY_BOOTS
  OTHERS
}

enum SystemFailedState {
  ELECTRIC
  MECHANIC
  HYDRAULIC
  STEAM
  TIRE
  OTHER
}
